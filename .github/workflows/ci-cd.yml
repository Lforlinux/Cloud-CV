name: Cloud CV CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggering

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.0
  NODE_VERSION: 18

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test Frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install dependencies
      run: |
        if [ -f "frontend/package.json" ]; then
          cd frontend && npm install
        fi
        
    - name: Lint HTML
      uses: htmllint/action@v1
      with:
        path: frontend/index.html
        
    - name: Lint CSS
      run: |
        if command -v stylelint &> /dev/null; then
          npx stylelint frontend/styles.css
        else
          echo "Stylelint not available, skipping CSS linting"
        fi
        
    - name: Lint JavaScript
      run: |
        if command -v eslint &> /dev/null; then
          npx eslint frontend/script.js
        else
          echo "ESLint not available, skipping JS linting"
        fi

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to AWS
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      working-directory: infra/terraform
      run: terraform init
      
    - name: Terraform Plan
      working-directory: infra/terraform
      run: terraform plan -out=tfplan
      
    - name: Terraform Apply
      working-directory: infra/terraform
      run: terraform apply tfplan
      
    - name: Get Terraform Outputs
      id: terraform-outputs
      working-directory: infra/terraform
      run: |
        echo "bucket_name=$(terraform output -raw bucket_name)" >> $GITHUB_OUTPUT
        echo "cloudfront_domain_name=$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_OUTPUT
        echo "api_gateway_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
        echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
        
    - name: Upload Frontend Files
      run: |
        echo "📁 Uploading frontend files to S3..."
        aws s3 cp frontend/index.html s3://${{ steps.terraform-outputs.outputs.bucket_name }}/ --content-type "text/html"
        aws s3 cp frontend/styles.css s3://${{ steps.terraform-outputs.outputs.bucket_name }}/ --content-type "text/css"
        aws s3 cp frontend/script.js s3://${{ steps.terraform-outputs.outputs.bucket_name }}/ --content-type "application/javascript"
        aws s3 cp cv.pdf s3://${{ steps.terraform-outputs.outputs.bucket_name }}/ --content-type "application/pdf"
        echo "✅ Frontend files uploaded successfully!"
        
    - name: Update API URL in Frontend
      run: |
        echo "🔧 Updating API URL in frontend..."
        # Create a backup of the original script
        cp frontend/script.js frontend/script.js.backup
        
        # Update the API URL in the script
        sed -i "s|this.apiUrl = '.*'|this.apiUrl = '${{ steps.terraform-outputs.outputs.api_gateway_url }}/visitor-count'|g" frontend/script.js
        
        # Upload the updated script
        aws s3 cp frontend/script.js s3://${{ steps.terraform-outputs.outputs.bucket_name }}/ --content-type "application/javascript"
        
        # Restore the original script
        mv frontend/script.js.backup frontend/script.js
        echo "✅ API URL updated successfully!"
        
    - name: Invalidate CloudFront Cache
      if: steps.terraform-outputs.outputs.cloudfront_distribution_id != ''
      run: |
        echo "🔄 Invalidating CloudFront cache..."
        aws cloudfront create-invalidation \
          --distribution-id ${{ steps.terraform-outputs.outputs.cloudfront_distribution_id }} \
          --paths "/index.html" "/script.js" "/styles.css" "/cv.pdf"
        echo "✅ CloudFront cache invalidation created!"
        
    - name: Set Website Permissions
      run: |
        echo "🔐 Setting S3 website permissions..."
        aws s3 website s3://${{ steps.terraform-outputs.outputs.bucket_name }} --index-document index.html --error-document index.html
        echo "✅ Website permissions set!"
        
    - name: Test Deployment
      run: |
        echo "🧪 Testing deployment..."
        CLOUDFRONT_URL="https://${{ steps.terraform-outputs.outputs.cloudfront_domain_name }}"
        API_URL="${{ steps.terraform-outputs.outputs.api_gateway_url }}/visitor-count"
        
        # Test CloudFront URL
        if curl -s -o /dev/null -w "%{http_code}" "$CLOUDFRONT_URL" | grep -q "200"; then
          echo "✅ CloudFront URL is accessible"
        else
          echo "⚠️ CloudFront URL may not be ready yet (takes 15-20 minutes)"
        fi
        
        # Test API endpoint
        if curl -s -o /dev/null -w "%{http_code}" "$API_URL" | grep -q "200"; then
          echo "✅ API endpoint is working"
        else
          echo "⚠️ API endpoint may not be ready yet"
        fi
        
    - name: Deployment Summary
      run: |
        echo "🎉 Cloud CV Deployment Complete!"
        echo ""
        echo "📊 Deployment Details:"
        echo "  S3 Bucket: ${{ steps.terraform-outputs.outputs.bucket_name }}"
        echo "  CloudFront URL: https://${{ steps.terraform-outputs.outputs.cloudfront_domain_name }}"
        echo "  API Gateway URL: ${{ steps.terraform-outputs.outputs.api_gateway_url }}"
        echo ""
        echo "🌐 Your Cloud CV is now live!"
        echo "  Main URL: https://${{ steps.terraform-outputs.outputs.cloudfront_domain_name }}"
        echo ""
        echo "⏰ Note: CloudFront takes 15-20 minutes to fully deploy"
        echo "   The URL will be available shortly"
